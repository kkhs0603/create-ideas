{"ast":null,"code":"import { useContext, useState, useCallback } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { storage } from \"../firebase/firebase\";\nexport const useUserSetting = () => {\n  const {\n    user,\n    handleGoBack,\n    updateUser\n  } = useContext(AuthContext);\n  const {\n    0: username,\n    1: setUserName\n  } = useState(user.displayName);\n  const {\n    0: tempFile,\n    1: setTempFile\n  } = useState(null);\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState(user.photoURL);\n  const handleUserNameOnChanged = useCallback(event => {\n    setUserName(event.target.value);\n  }, [setUserName]); //ユーザー情報更新\n\n  const updateUserSetting = async () => {\n    try {\n      const url = tempFile !== null ? await uploadImage(tempFile) : user.photoURL;\n      await user.updateProfile({\n        photoURL: url,\n        displayName: username\n      });\n      await updateUser(user.uid, username, url);\n      handleGoBack();\n    } catch (error) {\n      console.log(error);\n    }\n  }; //TODO:hooksなど切り出す Util\n  //画像をstorageにupload\n\n\n  const uploadImage = image => {\n    return new Promise((resolve, reject) => {\n      const uploadTask = storage.ref(`/images/${user.uid}`).put(image);\n      uploadTask.on(\"state_changed\", // 進行中のsnapshotを得る\n      // アップロードの進行度を表示\n      snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        reject(error);\n        alert(error);\n      }, // 完了後の処理\n      // 画像表示のため、アップロードした画像のURLを取得\n      async () => {\n        const imageUrl = await storage.ref(\"images\").child(user.uid).getDownloadURL();\n        await setImageUrl(imageUrl);\n        resolve(imageUrl);\n      });\n    });\n  }; //画像を一時保存\n\n\n  const handleSaveTempImage = event => {\n    try {\n      const image = event.target.files[0];\n      setTempFile(image);\n      const reader = new FileReader();\n      reader.readAsDataURL(image);\n\n      reader.onload = () => {\n        setImageUrl(reader.result);\n      };\n\n      console.log(\"stored profile image\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return [updateUserSetting, handleUserNameOnChanged, username, handleGoBack, imageUrl, handleSaveTempImage];\n};","map":{"version":3,"sources":["/Users/kakehashishunsuke/create-ideas/src/hooks/useUserSetting.js"],"names":["useContext","useState","useCallback","AuthContext","storage","useUserSetting","user","handleGoBack","updateUser","username","setUserName","displayName","tempFile","setTempFile","imageUrl","setImageUrl","photoURL","handleUserNameOnChanged","event","target","value","updateUserSetting","url","uploadImage","updateProfile","uid","error","console","log","image","Promise","resolve","reject","uploadTask","ref","put","on","snapshot","progress","bytesTransferred","totalBytes","alert","child","getDownloadURL","handleSaveTempImage","files","reader","FileReader","readAsDataURL","onload","result","message"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,OAAlD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,MAAqCR,UAAU,CAACG,WAAD,CAArD;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAACK,IAAI,CAACK,WAAN,CAAxC;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACa,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAACK,IAAI,CAACU,QAAN,CAAxC;AAEA,QAAMC,uBAAuB,GAAGf,WAAW,CACxCgB,KAAD,IAAW;AACTR,IAAAA,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAHwC,EAIzC,CAACV,WAAD,CAJyC,CAA3C,CANkC,CAYlC;;AACA,QAAMW,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,GAAG,GACPV,QAAQ,KAAK,IAAb,GAAoB,MAAMW,WAAW,CAACX,QAAD,CAArC,GAAkDN,IAAI,CAACU,QADzD;AAEA,YAAMV,IAAI,CAACkB,aAAL,CAAmB;AAAER,QAAAA,QAAQ,EAAEM,GAAZ;AAAiBX,QAAAA,WAAW,EAAEF;AAA9B,OAAnB,CAAN;AACA,YAAMD,UAAU,CAACF,IAAI,CAACmB,GAAN,EAAWhB,QAAX,EAAqBa,GAArB,CAAhB;AACAf,MAAAA,YAAY;AACb,KAND,CAME,OAAOmB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAVD,CAbkC,CAyBlC;AACA;;;AACA,QAAMH,WAAW,GAAIM,KAAD,IAAW;AAC7B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU,GAAG7B,OAAO,CAAC8B,GAAR,CAAa,WAAU5B,IAAI,CAACmB,GAAI,EAAhC,EAAmCU,GAAnC,CAAuCN,KAAvC,CAAnB;AACAI,MAAAA,UAAU,CAACG,EAAX,CACE,eADF,EAEE;AACA;AACCC,MAAAA,QAAD,IAAc;AACZ,cAAMC,QAAQ,GACXD,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GADtD;AAEAb,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeU,QAAf,GAA0B,QAAtC;AACD,OARH,EASGZ,KAAD,IAAW;AACTM,QAAAA,MAAM,CAACN,KAAD,CAAN;AACAe,QAAAA,KAAK,CAACf,KAAD,CAAL;AACD,OAZH,EAaE;AACA;AACA,kBAAY;AACV,cAAMZ,QAAQ,GAAG,MAAMV,OAAO,CAC3B8B,GADoB,CAChB,QADgB,EAEpBQ,KAFoB,CAEdpC,IAAI,CAACmB,GAFS,EAGpBkB,cAHoB,EAAvB;AAIA,cAAM5B,WAAW,CAACD,QAAD,CAAjB;AACAiB,QAAAA,OAAO,CAACjB,QAAD,CAAP;AACD,OAtBH;AAwBD,KA1BM,CAAP;AA2BD,GA5BD,CA3BkC,CAyDlC;;;AACA,QAAM8B,mBAAmB,GAAI1B,KAAD,IAAW;AACrC,QAAI;AACF,YAAMW,KAAK,GAAGX,KAAK,CAACC,MAAN,CAAa0B,KAAb,CAAmB,CAAnB,CAAd;AACAhC,MAAAA,WAAW,CAACgB,KAAD,CAAX;AACA,YAAMiB,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBnB,KAArB;;AACAiB,MAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpBlC,QAAAA,WAAW,CAAC+B,MAAM,CAACI,MAAR,CAAX;AACD,OAFD;;AAGAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KATD,CASE,OAAOF,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACyB,OAAlB;AACD;AACF,GAbD;;AAeA,SAAO,CACL9B,iBADK,EAELJ,uBAFK,EAGLR,QAHK,EAILF,YAJK,EAKLO,QALK,EAML8B,mBANK,CAAP;AAQD,CAjFM","sourcesContent":["import { useContext, useState, useCallback } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { storage } from \"../firebase/firebase\";\n\nexport const useUserSetting = () => {\n  const { user, handleGoBack, updateUser } = useContext(AuthContext);\n  const [username, setUserName] = useState(user.displayName);\n  const [tempFile, setTempFile] = useState(null);\n  const [imageUrl, setImageUrl] = useState(user.photoURL);\n\n  const handleUserNameOnChanged = useCallback(\n    (event) => {\n      setUserName(event.target.value);\n    },\n    [setUserName]\n  );\n  //ユーザー情報更新\n  const updateUserSetting = async () => {\n    try {\n      const url =\n        tempFile !== null ? await uploadImage(tempFile) : user.photoURL;\n      await user.updateProfile({ photoURL: url, displayName: username });\n      await updateUser(user.uid, username, url);\n      handleGoBack();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //TODO:hooksなど切り出す Util\n  //画像をstorageにupload\n  const uploadImage = (image) => {\n    return new Promise((resolve, reject) => {\n      const uploadTask = storage.ref(`/images/${user.uid}`).put(image);\n      uploadTask.on(\n        \"state_changed\",\n        // 進行中のsnapshotを得る\n        // アップロードの進行度を表示\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          reject(error);\n          alert(error);\n        },\n        // 完了後の処理\n        // 画像表示のため、アップロードした画像のURLを取得\n        async () => {\n          const imageUrl = await storage\n            .ref(\"images\")\n            .child(user.uid)\n            .getDownloadURL();\n          await setImageUrl(imageUrl);\n          resolve(imageUrl);\n        }\n      );\n    });\n  };\n\n  //画像を一時保存\n  const handleSaveTempImage = (event) => {\n    try {\n      const image = event.target.files[0];\n      setTempFile(image);\n      const reader = new FileReader();\n      reader.readAsDataURL(image);\n      reader.onload = () => {\n        setImageUrl(reader.result);\n      };\n      console.log(\"stored profile image\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return [\n    updateUserSetting,\n    handleUserNameOnChanged,\n    username,\n    handleGoBack,\n    imageUrl,\n    handleSaveTempImage,\n  ];\n};\n"]},"metadata":{},"sourceType":"module"}