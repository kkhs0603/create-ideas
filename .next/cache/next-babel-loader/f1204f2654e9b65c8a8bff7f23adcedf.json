{"ast":null,"code":"var _jsxFileName = \"/Users/kakehashishunsuke/create-ideas/src/contexts/CanvasContext.js\";\nvar __jsx = React.createElement;\nimport React, { useState, createContext, useEffect } from \"react\";\nimport firebase from \"../firebase/firebase\";\nconst CanvasContext = /*#__PURE__*/createContext();\nconst db = firebase.firestore();\n\nconst CanvasProvider = ({\n  children\n}) => {\n  const {\n    0: canvases,\n    1: setCanvases\n  } = useState([]);\n  const {\n    0: canvasName,\n    1: setCanvasName\n  } = useState(\"\");\n  const {\n    0: joinedUsers,\n    1: setJoinedUsers\n  } = useState([]);\n  const auth = firebase.auth(); /////////\n  ///canvas\n  /////////\n\n  const createCanvas = async () => {\n    try {\n      const userDoc = await db.collection(\"users\").doc(auth.currentUser.uid).get();\n      const userData = userDoc.data();\n      console.log(userData); //canvases\n\n      const timestamp = firebase.firestore.Timestamp.now();\n      await db.collection(\"canvases\").add({\n        name: canvasName,\n        words: [],\n        ideas: [],\n        joined_users: [],\n        created_at: timestamp,\n        created_by: auth.currentUser.uid,\n        updated_at: timestamp\n      });\n      console.log(\"new canvas created!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCanvases = async () => {\n    try {\n      const canvasesRef = await db.collection(\"canvases\");\n      canvasesRef.onSnapshot(snapshot => {\n        snapshot.docs.forEach(change => {\n          setCanvases(values => [...values, {\n            id: change.id,\n            name: change.data().name,\n            created_by: change.data().created_by,\n            created_at: new Date(change.data().created_at)\n          }]);\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCanvasName = event => {\n    console.log(event.target.value);\n    setCanvasName(event.target.value);\n  };\n\n  const enterCanvas = async canvasId => {\n    try {\n      //firebase canvasesのコレクションから参加しているユーザーID取得\n      setJoinedUsers([]);\n      const canvasesRef = await db.collection(\"canvases\").doc(canvasId);\n      const joinedUserIds = (await canvasesRef.get()).data().joined_users;\n      const myUserId = auth.currentUser.uid;\n\n      if (!joinedUserIds.includes(myUserId)) {\n        joinedUserIds.push(myUserId);\n        canvasesRef.update({\n          joined_users: joinedUserIds\n        });\n      } //取得したユーザーIDからユーザー情報取得\n\n\n      joinedUserIds.map(async userId => {\n        const usersRef = db.collection(\"users\").doc(userId);\n        const userdata = (await usersRef.get()).data();\n        setJoinedUsers(user => [...user, userdata]);\n      });\n      await canvasesRef.onSnapshot(snapshot => {\n        if (snapshot.data().created_by !== auth.currentUser.uid) {// console.log(\"not authoer\");\n        } else {// console.log(\"author\");\n          }\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        getCanvases();\n      }\n    });\n  }, [auth]);\n  return __jsx(CanvasContext.Provider, {\n    value: {\n      createCanvas,\n      canvases,\n      handleCanvasName,\n      enterCanvas,\n      joinedUsers\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { CanvasContext, CanvasProvider };","map":{"version":3,"sources":["/Users/kakehashishunsuke/create-ideas/src/contexts/CanvasContext.js"],"names":["React","useState","createContext","useEffect","firebase","CanvasContext","db","firestore","CanvasProvider","children","canvases","setCanvases","canvasName","setCanvasName","joinedUsers","setJoinedUsers","auth","createCanvas","userDoc","collection","doc","currentUser","uid","get","userData","data","console","log","timestamp","Timestamp","now","add","name","words","ideas","joined_users","created_at","created_by","updated_at","error","getCanvases","canvasesRef","onSnapshot","snapshot","docs","forEach","change","values","id","Date","handleCanvasName","event","target","value","enterCanvas","canvasId","joinedUserIds","myUserId","includes","push","update","map","userId","usersRef","userdata","user","message","onAuthStateChanged"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\nimport firebase from \"../firebase/firebase\";\nconst CanvasContext = createContext();\nconst db = firebase.firestore();\nconst CanvasProvider = ({ children }) => {\n  const [canvases, setCanvases] = useState([]);\n  const [canvasName, setCanvasName] = useState(\"\");\n  const [joinedUsers, setJoinedUsers] = useState([]);\n  const auth = firebase.auth();\n\n  /////////\n  ///canvas\n  /////////\n  const createCanvas = async () => {\n    try {\n      const userDoc = await db\n        .collection(\"users\")\n        .doc(auth.currentUser.uid)\n        .get();\n      const userData = userDoc.data();\n      console.log(userData);\n      //canvases\n      const timestamp = firebase.firestore.Timestamp.now();\n      await db.collection(\"canvases\").add({\n        name: canvasName,\n        words: [],\n        ideas: [],\n        joined_users: [],\n        created_at: timestamp,\n        created_by: auth.currentUser.uid,\n        updated_at: timestamp,\n      });\n      console.log(\"new canvas created!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCanvases = async () => {\n    try {\n      const canvasesRef = await db.collection(\"canvases\");\n      canvasesRef.onSnapshot((snapshot) => {\n        snapshot.docs.forEach((change) => {\n          setCanvases((values) => [\n            ...values,\n            {\n              id: change.id,\n              name: change.data().name,\n              created_by: change.data().created_by,\n              created_at: new Date(change.data().created_at),\n            },\n          ]);\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCanvasName = (event) => {\n    console.log(event.target.value);\n    setCanvasName(event.target.value);\n  };\n\n  const enterCanvas = async (canvasId) => {\n    try {\n      //firebase canvasesのコレクションから参加しているユーザーID取得\n      setJoinedUsers([]);\n      const canvasesRef = await db.collection(\"canvases\").doc(canvasId);\n      const joinedUserIds = (await canvasesRef.get()).data().joined_users;\n      const myUserId = auth.currentUser.uid;\n      if (!joinedUserIds.includes(myUserId)) {\n        joinedUserIds.push(myUserId);\n        canvasesRef.update({ joined_users: joinedUserIds });\n      }\n      //取得したユーザーIDからユーザー情報取得\n      joinedUserIds.map(async (userId) => {\n        const usersRef = db.collection(\"users\").doc(userId);\n        const userdata = (await usersRef.get()).data();\n        setJoinedUsers((user) => [...user, userdata]);\n      });\n      await canvasesRef.onSnapshot((snapshot) => {\n        if (snapshot.data().created_by !== auth.currentUser.uid) {\n          // console.log(\"not authoer\");\n        } else {\n          // console.log(\"author\");\n        }\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        getCanvases();\n      }\n    });\n  }, [auth]);\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        createCanvas,\n        canvases,\n        handleCanvasName,\n        enterCanvas,\n        joinedUsers,\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport { CanvasContext, CanvasProvider };\n"]},"metadata":{},"sourceType":"module"}