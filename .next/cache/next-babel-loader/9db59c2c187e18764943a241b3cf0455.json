{"ast":null,"code":"var _jsxFileName = \"/Users/kakehashishunsuke/create-ideas/src/contexts/CanvasContext.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, createContext, useEffect } from \"react\";\nimport firebase from \"../firebase/firebase\";\nconst CanvasContext = /*#__PURE__*/createContext();\nconst db = firebase.firestore();\n\nconst CanvasProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    0: canvases,\n    1: setCanvases\n  } = useState([]);\n  const {\n    0: canvasName,\n    1: setCanvasName\n  } = useState(\"\");\n  const {\n    0: joinedUsers,\n    1: setJoinedUsers\n  } = useState([]);\n  const auth = firebase.auth(); /////////\n  ///canvas\n  /////////\n\n  const createCanvas = async () => {\n    try {\n      //canvases\n      const timestamp = firebase.firestore.Timestamp.now();\n      await db.collection(\"canvases\").add({\n        name: canvasName,\n        words: [],\n        ideas: [],\n        joined_users: [],\n        created_at: timestamp,\n        created_by: auth.currentUser.uid,\n        updated_at: timestamp\n      });\n      console.log(\"new canvas created!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCanvases = async () => {\n    try {\n      const canvasesRef = await db.collection(\"canvases\");\n      canvasesRef.onSnapshot(snapshot => {\n        snapshot.docs.forEach(change => {\n          const date = change.data().created_at.toDate();\n          setCanvases(values => [...values, {\n            id: change.id,\n            name: change.data().name,\n            created_by: change.data().created_by,\n            created_at: date\n          }]);\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCanvasName = event => {\n    //console.log(event.target.value);\n    setCanvasName(event.target.value);\n  };\n\n  const enterCanvas = async canvasId => {\n    try {\n      //firebase canvasesのコレクションから参加しているユーザーID取得\n      setJoinedUsers([]);\n      const canvasesRef = await db.collection(\"canvases\").doc(canvasId);\n      const joinedUserIds = (await canvasesRef.get()).data().joined_users;\n      const myUserId = auth.currentUser.uid;\n\n      if (!joinedUserIds.includes(myUserId)) {\n        joinedUserIds.push(myUserId);\n        canvasesRef.update({\n          joined_users: joinedUserIds\n        });\n      } //取得したユーザーIDからユーザー情報取得\n\n\n      joinedUserIds.map(async userId => {\n        const usersRef = db.collection(\"users\").doc(userId);\n        const userdata = (await usersRef.get()).data();\n        setJoinedUsers(user => [...user, userdata]);\n      });\n      await canvasesRef.onSnapshot(snapshot => {\n        if (snapshot.data().created_by !== auth.currentUser.uid) {// console.log(\"not authoer\");\n        } else {// console.log(\"author\");\n          }\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        getCanvases();\n      }\n    });\n  }, [auth]);\n  return __jsx(CanvasContext.Provider, {\n    value: {\n      createCanvas,\n      canvases,\n      handleCanvasName,\n      enterCanvas,\n      joinedUsers\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s(CanvasProvider, \"I4UFS0XF3eY0fi1wauqYCPyn5Eo=\");\n\n_c = CanvasProvider;\nexport { CanvasContext, CanvasProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasProvider\");","map":{"version":3,"sources":["/Users/kakehashishunsuke/create-ideas/src/contexts/CanvasContext.js"],"names":["React","useState","createContext","useEffect","firebase","CanvasContext","db","firestore","CanvasProvider","children","canvases","setCanvases","canvasName","setCanvasName","joinedUsers","setJoinedUsers","auth","createCanvas","timestamp","Timestamp","now","collection","add","name","words","ideas","joined_users","created_at","created_by","currentUser","uid","updated_at","console","log","error","getCanvases","canvasesRef","onSnapshot","snapshot","docs","forEach","change","date","data","toDate","values","id","handleCanvasName","event","target","value","enterCanvas","canvasId","doc","joinedUserIds","get","myUserId","includes","push","update","map","userId","usersRef","userdata","user","message","onAuthStateChanged"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\nimport firebase from \"../firebase/firebase\";\nconst CanvasContext = createContext();\nconst db = firebase.firestore();\nconst CanvasProvider = ({ children }) => {\n  const [canvases, setCanvases] = useState([]);\n  const [canvasName, setCanvasName] = useState(\"\");\n  const [joinedUsers, setJoinedUsers] = useState([]);\n  const auth = firebase.auth();\n\n  /////////\n  ///canvas\n  /////////\n  const createCanvas = async () => {\n    try {\n      //canvases\n      const timestamp = firebase.firestore.Timestamp.now();\n      await db.collection(\"canvases\").add({\n        name: canvasName,\n        words: [],\n        ideas: [],\n        joined_users: [],\n        created_at: timestamp,\n        created_by: auth.currentUser.uid,\n        updated_at: timestamp,\n      });\n      console.log(\"new canvas created!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCanvases = async () => {\n    try {\n      const canvasesRef = await db.collection(\"canvases\");\n      canvasesRef.onSnapshot((snapshot) => {\n        snapshot.docs.forEach((change) => {\n          const date = change.data().created_at.toDate();\n          setCanvases((values) => [\n            ...values,\n            {\n              id: change.id,\n              name: change.data().name,\n              created_by: change.data().created_by,\n              created_at: date,\n            },\n          ]);\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCanvasName = (event) => {\n    //console.log(event.target.value);\n    setCanvasName(event.target.value);\n  };\n\n  const enterCanvas = async (canvasId) => {\n    try {\n      //firebase canvasesのコレクションから参加しているユーザーID取得\n      setJoinedUsers([]);\n      const canvasesRef = await db.collection(\"canvases\").doc(canvasId);\n      const joinedUserIds = (await canvasesRef.get()).data().joined_users;\n      const myUserId = auth.currentUser.uid;\n      if (!joinedUserIds.includes(myUserId)) {\n        joinedUserIds.push(myUserId);\n        canvasesRef.update({ joined_users: joinedUserIds });\n      }\n      //取得したユーザーIDからユーザー情報取得\n      joinedUserIds.map(async (userId) => {\n        const usersRef = db.collection(\"users\").doc(userId);\n        const userdata = (await usersRef.get()).data();\n        setJoinedUsers((user) => [...user, userdata]);\n      });\n      await canvasesRef.onSnapshot((snapshot) => {\n        if (snapshot.data().created_by !== auth.currentUser.uid) {\n          // console.log(\"not authoer\");\n        } else {\n          // console.log(\"author\");\n        }\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        getCanvases();\n      }\n    });\n  }, [auth]);\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        createCanvas,\n        canvases,\n        handleCanvasName,\n        enterCanvas,\n        joinedUsers,\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport { CanvasContext, CanvasProvider };\n"]},"metadata":{},"sourceType":"module"}